# -*- coding: utf-8 -*-
"""Proyek Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ZToJ4z19NJR31VRNja-kNN6q1L9-Dop

###IMPORT LIBRARY YANG DIGUNAKAN###
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
import kagglehub
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

"""###MENDOWNLOAD DATA DARI KAGGLE###"""

# Download latest version
path = kagglehub.dataset_download("adilshamim8/student-depression-dataset")

print("Path to dataset files:", path)

"""###GATHERING DATA###"""

df = pd.read_csv(path + '/student_depression_dataset.csv')
df.head()

"""###ASSESING DATA###"""

df.describe()

df.info()

df.isna().sum()

"""###Exploratory Data Analysis (EDA)###"""

plt.figure(figsize=(8,5))
sns.countplot(x='Depression', data=df, palette="viridis")
plt.title("Distribution of Depression")
plt.xlabel("Depression (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(8,5))
sns.countplot(x='Gender', data=df, palette="viridis", hue='Depression')
plt.title("Distribution of Gender")
plt.xlabel("Gender")
plt.ylabel("Count")
plt.show()

num_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
df[num_cols].hist(figsize=(10, 10), bins=20)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8,5))
corr_amtrix = df[num_cols].corr()
sns.heatmap(corr_amtrix, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

"""###SPLITTING DATA, TRANSFORMATION DATA, MODELING, AND EVALUATION###"""

X = df.drop(columns=['id', 'Depression'], axis=1)
y = df['Depression']

num_cols=X.select_dtypes(include=['int64','float64']).columns.tolist()
cat_cols=X.select_dtypes(include=['object']).columns.tolist()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

preprocessing = ColumnTransformer([('scaler',StandardScaler(),num_cols),
                                  ('encoder',OneHotEncoder(handle_unknown='ignore', sparse_output=False),cat_cols)])

models = {'Logistic Regression': LogisticRegression(),
          'Gradient Boosting': GradientBoostingClassifier(),
          'Decision Tree' : DecisionTreeClassifier()}

results={}
for name,model in models.items():
    pipeline=Pipeline([('pre',preprocessing),
                      ('model',model)])
    pipeline.fit(X_train,y_train)
    y_pred=pipeline.predict(X_test)
    acc=accuracy_score(y_test,y_pred)
    results[name]=acc
    print(f'Accuracy score for {name} is {acc}')